:root {
    --font-title: 'Space Grotesk', sans-serif;
    --font-ui: 'Inter', sans-serif;
    --font-mono: 'Roboto Mono', monospace;
    --font-footer: 'Caveat', cursive; /* New Font Variable */
    --success-color: #16A34A;
    --warning-color: #D97706;
    --error-color: #DC2626;

    /* Final "Cream Cappuccino Beige" Light Theme */
    --bg-light: #F7F0E8;       /* Warm, cream cappuccino beige background */
    --text-light: #4E443A;     /* Rich, dark espresso text */
    --accent-light: #3B82F6;   /* A clean, vibrant blue for pure contrast */
    --border-light: #DCD0C0;   /* Soft, darker beige for borders */
    --field-bg-light: #FFFFFF;  /* Clean, pure white cards for clarity */

    /* Refined Dark Theme */
    --bg-dark: #111111;
    --text-dark: #E5E7EB;
    --accent-dark: #60A5FA;
    --border-dark: #374151;
    --field-bg-dark: #1F2937;
}

* { box-sizing: border-box; }
body {
    font-family: var(--font-ui); margin: 0; height: 100vh; width: 100vw;
    overflow: hidden; display: flex; flex-direction: column;
    transition: background-color 0.3s ease, color 0.3s ease;
}
body { background-color: var(--bg-light); color: var(--text-light); }
body.dark { background-color: var(--bg-dark); color: var(--text-dark); }

#background-blur {
    position: fixed; top: 50%; left: 50%; width: 50vmax; height: 50vmax;
    background-color: var(--accent-light); border-radius: 50%;
    filter: blur(150px); transform: translate(-50%, -50%);
    opacity: 0.1; transition: background-color 0.5s ease;
    z-index: -1; /* Ensure it's behind everything */
}
body.dark #background-blur { background-color: var(--accent-dark); opacity: 0.15; }

.app-header {
    padding: 2rem 4rem; display: flex; align-items: center;
    flex-shrink: 0; animation: fadeInDown 0.5s ease-out; position: relative;
}
.title-container { position: absolute; left: 50%; transform: translateX(-50%); }
.app-title { font-family: var(--font-title); font-weight: 700; font-size: 1.5rem; letter-spacing: 0.3em; margin: 0; }
.theme-toggle {
    background: transparent; border: none; width: 44px; height: 44px;
    border-radius: 50%; cursor: pointer; display: flex; justify-content: center;
    align-items: center; position: relative; overflow: hidden; color: var(--text-light);
    transition: transform 0.3s ease, color 0.3s ease; margin-left: auto;
}
.theme-toggle:hover { transform: scale(1.15); }
body.dark .theme-toggle { color: var(--text-dark); }
.theme-toggle svg { position: absolute; transition: transform 0.5s cubic-bezier(0.2, 1, 0.3, 1); }
.theme-toggle .moon { transform: translateY(150%) scale(0.5); }
.theme-toggle .sun { transform: translateY(0) scale(1); }
body.dark .theme-toggle .moon { transform: translateY(0) scale(1); }
body.dark .theme-toggle .sun { transform: translateY(-150%) scale(0.5); }

.converter-core {
    flex-grow: 1; display: flex; align-items: stretch; gap: 1rem;
    padding: 0.5rem 4rem 4rem; animation: fadeInUp 0.5s ease-out;
}
.field-container { flex: 1; display: flex; flex-direction: column; min-width: 0; }
.field-header {
    display: flex; justify-content: space-between; align-items: center;
    margin-bottom: 1rem; font-family: var(--font-ui); font-weight: 500;
    font-size: 0.9rem; letter-spacing: 0.1em; color: var(--text-light); opacity: 0.7;
}
body.dark .field-header { color: var(--text-dark); opacity: 0.7; }

.swap-container { display: flex; align-items: center; padding-bottom: 3rem; }
.swap-btn {
    background-color: var(--field-bg-light); border: 1px solid var(--border-light);
    border-radius: 50%; width: 50px; height: 50px; cursor: pointer;
    display: flex; align-items: center; justify-content: center;
    color: var(--text-light); opacity: 0.8; transition: all 0.3s ease;
}
.swap-btn:hover { opacity: 1; transform: scale(1.1); border-color: var(--accent-light); }
body.dark .swap-btn { background-color: var(--bg-dark); border-color: var(--border-dark); color: var(--text-dark); }
body.dark .swap-btn:hover { border-color: var(--accent-dark); }
.swap-icon path { transition: transform 0.4s cubic-bezier(0.2, 1, 0.3, 1); }
.swap-btn:hover .swap-icon .arrow-top { transform: translateX(2px); }
.swap-btn:hover .swap-icon .line-top { transform: translateX(-2px); }
.swap-btn:hover .swap-icon .arrow-bottom { transform: translateX(-2px); }
.swap-btn:hover .swap-icon .line-bottom { transform: translateX(2px); }

.textarea-wrapper { position: relative; flex-grow: 1; display: flex; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.05); }
.button-group {
    position: absolute; top: 16px; right: 16px; display: flex; gap: 8px;
    opacity: 0; transform: translateY(10px); transition: all 0.2s ease-out; pointer-events: none;
}
.textarea-wrapper:hover .button-group, textarea:focus ~ .button-group { opacity: 0.7; transform: translateY(0); pointer-events: all; }
.button-group:hover { opacity: 1; }
.utility-btn {
    background-color: rgba(255, 255, 255, 0.7); border: 1px solid var(--border-light);
    backdrop-filter: blur(5px);
    border-radius: 8px; width: 36px; height: 36px;
    display: flex; align-items: center; justify-content: center;
    cursor: pointer; color: var(--text-light); position: relative;
    transition: all 0.2s ease-out;
}
body.dark .utility-btn { background-color: rgba(31, 41, 55, 0.7); border-color: var(--border-dark); color: var(--text-dark); }
.utility-btn:hover { border-color: var(--accent-light); }
body.dark .utility-btn:hover { border-color: var(--accent-dark); }
.utility-btn .check-icon { position: absolute; transform: scale(0); transition: transform 0.2s ease-out; color: var(--success-color); }
.utility-btn.copied .check-icon { transform: scale(1); }
.utility-btn.copied .copy-icon { transform: scale(0); }

select { background: transparent; border: none; font-family: var(--font-mono); font-size: 0.9rem; color: inherit; cursor: pointer; }
select option { background: var(--bg-light); color: var(--text-light); }
body.dark select option { background: var(--bg-dark); color: var(--text-dark); }

textarea {
    flex-grow: 1; width: 100%; padding: 1.5rem; padding-right: 100px;
    border: 1px solid var(--border-light); background-color: var(--field-bg-light);
    font-family: var(--font-mono); font-size: 1.25rem;
    color: var(--text-light); resize: none; transition: all 0.3s ease;
    word-break: break-all;
}
textarea:focus { outline: none; border-color: var(--accent-light); box-shadow: 0 0 0 4px var(--accent-light-transparent, rgba(59, 130, 246, 0.2)); }
body.dark textarea { border-color: var(--border-dark); background-color: var(--field-bg-dark); color: var(--text-dark); }
body.dark textarea:focus { border-color: var(--accent-dark); box-shadow: 0 0 0 4px var(--accent-dark-transparent, rgba(96, 165, 250, 0.2)); }
#output-area { opacity: 0.9; }

@keyframes fadeInUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
@keyframes fadeInDown { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }

/* --- Footer Styles --- */
.app-footer {
    position: fixed;
    bottom: 1rem;  /* Moved down a little */
    left: 50%;
    transform: translateX(-51%); /* Shifted slightly to the left */
    z-index: 10;
    opacity: 0.9;
    padding: 0 1rem;
}
.footer-interactive-area {
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: var(--font-footer);
    font-size: 1.6rem;
    font-weight: 700;
    color: var(--text-light);
    cursor: pointer;
    -webkit-user-select: none; /* Safari */
    -ms-user-select: none; /* IE 10+ */
    user-select: none; /* Standard */
    min-height: 30px;
}
body.dark .footer-interactive-area {
    color: var(--text-dark);
}
.heart-icon-container {
    font-size: 1.4rem;
    color: #e31b23;
    margin: 0 6px;
    transition: transform 0.4s ease;
}
.footer-interactive-area:hover .heart-icon-container {
    transform: scale(1.2);
}
.text-container {
    display: flex;
}
.made-with {
    direction: rtl;
    unicode-bidi: bidi-override;
}
.text-container span {
    display: inline-block;
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
}
.footer-interactive-area:hover .text-container span,
.footer-interactive-area.active .text-container span {
    opacity: 1;
    transform: translateY(0);
}
.footer-interactive-area:hover .made-with span:nth-child(1), .footer-interactive-area.active .made-with span:nth-child(1) { transition-delay: 0s; }
.footer-interactive-area:hover .made-with span:nth-child(2), .footer-interactive-area.active .made-with span:nth-child(2) { transition-delay: 0.08s; }
.footer-interactive-area:hover .made-with span:nth-child(3), .footer-interactive-area.active .made-with span:nth-child(3) { transition-delay: 0.16s; }
.footer-interactive-area:hover .made-with span:nth-child(4), .footer-interactive-area.active .made-with span:nth-child(4) { transition-delay: 0.24s; }
.footer-interactive-area:hover .made-with span:nth-child(5), .footer-interactive-area.active .made-with span:nth-child(5) { transition-delay: 0.32s; }
.footer-interactive-area:hover .made-with span:nth-child(6), .footer-interactive-area.active .made-with span:nth-child(6) { transition-delay: 0.40s; }
.footer-interactive-area:hover .made-with span:nth-child(7), .footer-interactive-area.active .made-with span:nth-child(7) { transition-delay: 0.48s; }
.footer-interactive-area:hover .made-with span:nth-child(8), .footer-interactive-area.active .made-with span:nth-child(8) { transition-delay: 0.56s; }
.footer-interactive-area:hover .made-with span:nth-child(9), .footer-interactive-area.active .made-with span:nth-child(9) { transition-delay: 0.64s; }

.footer-interactive-area:hover .by-ma span:nth-child(1), .footer-interactive-area.active .by-ma span:nth-child(1) { transition-delay: 0s; }
.footer-interactive-area:hover .by-ma span:nth-child(2), .footer-interactive-area.active .by-ma span:nth-child(2) { transition-delay: 0.08s; }
.footer-interactive-area:hover .by-ma span:nth-child(3), .footer-interactive-area.active .by-ma span:nth-child(3) { transition-delay: 0.16s; }
.footer-interactive-area:hover .by-ma span:nth-child(4), .footer-interactive-area.active .by-ma span:nth-child(4) { transition-delay: 0.24s; }
.footer-interactive-area:hover .by-ma span:nth-child(5), .footer-interactive-area.active .by-ma span:nth-child(5) { transition-delay: 0.32s; }
.footer-interactive-area:hover .by-ma span:nth-child(6), .footer-interactive-area.active .by-ma span:nth-child(6) { transition-delay: 0.40s; }


@media (max-width: 800px) {
    .converter-core { flex-direction: column; padding: 0.5rem 0.5rem 5rem; gap: 0; }
    .swap-container { 
        order: 1; 
        padding: 0.5rem 0; 
        justify-content: center;
    }
    .from-container { order: 0; }
    .to-container { order: 2; }
    .swap-btn { transform: rotate(90deg); }
    .swap-btn:hover { transform: rotate(90deg) scale(1.1); }
    .app-header { padding: 1.5rem 1rem; }
    .title-container { position: static; transform: none; text-align: center; }
    .theme-toggle { position: absolute; top: 1.25rem; right: 1rem; }
    textarea { 
        font-size: 1rem; 
        padding: 1rem; 
        padding-right: 90px;
    }
    .button-group { 
        display: flex;
        top: 10px; right: 10px;
    }
    .app-footer {
        bottom: 0.75rem; /* A little closer to the bottom on mobile */
    }
    .footer-interactive-area {
        font-size: 1.3rem;
    }
}```

### `core.js`
No changes were needed for this file. It remains exactly the same.

```javascript
document.addEventListener('DOMContentLoaded', () => {
    // --- Centralized DOM Element Management ---
    const elements = {
        inputArea: document.getElementById('input-area'),
        outputArea: document.getElementById('output-area'),
        fromBaseSelect: document.getElementById('from-base-select'),
        toBaseSelect: document.getElementById('to-base-select'),
        themeToggle: document.getElementById('theme-toggle'),
        swapBtn: document.getElementById('swap-btn'),
        body: document.body,
    };

    // --- The Final, Ultra-Reliable Conversion Engine ---
    const ConverterEngine = {
        // Module for number-to-number conversions
        Numerical: {
            // Converts a numerical string from any base into a BigInt.
            toBigInt(value, fromBase) {
                const base = parseInt(fromBase);
                const sanitizedValue = value.replace(/\s/g, '').toLowerCase();
                if (sanitizedValue === '') return 0n;

                let bigIntValue = 0n;
                const alphabet = '0123456789abcdef';
                for (const char of sanitizedValue) {
                    const charValue = alphabet.indexOf(char);
                    if (charValue === -1 || charValue >= base) {
                        throw new Error(`'${char}' is not a valid digit for Base-${base}.`);
                    }
                    bigIntValue = bigIntValue * BigInt(base) + BigInt(charValue);
                }
                return bigIntValue;
            },
            // Converts a BigInt into a string of the target base.
            fromBigInt(bigIntValue, toBase) {
                const base = parseInt(toBase);
                return bigIntValue.toString(base).toUpperCase();
            }
        },
        // Module for conversions involving text
        Text: {
            // Converts a string into an array of its character codes.
            toCharCodes(text) {
                const codes = [];
                for (let i = 0; i < text.length; i++) {
                    codes.push(text.charCodeAt(i));
                }
                return codes;
            },
            // Converts an array of character codes back into a string.
            fromCharCodes(codes) {
                return String.fromCharCode(...codes);
            }
        }
    };

    // --- Main Application Logic ---
    function handleConversion() {
        const { inputArea, outputArea, fromBaseSelect, toBaseSelect } = elements;
        const inputValue = inputArea.value;
        const fromBase = fromBaseSelect.value;
        const toBase = toBaseSelect.value;

        // --- Validation ---
        if (fromBase === toBase) {
            outputArea.value = "Source and target bases cannot be the same.";
            outputArea.style.color = 'var(--warning-color)';
            return;
        }
        if (inputValue.trim() === '') {
            outputArea.value = '';
            return;
        }
        
        try {
            let result = '';

            // --- Conversion Routing ---
            if (fromBase === 'text') {
                // Path 1: Text to a numerical base (character-wise)
                const codes = ConverterEngine.Text.toCharCodes(inputValue);
                result = codes.map(code => ConverterEngine.Numerical.fromBigInt(BigInt(code), toBase)).join(' ');
            } else if (toBase === 'text') {
                // Path 2: A numerical base to text (character-wise)
                const numbers = inputValue.trim().split(/\s+/);
                const codes = numbers.map(num => ConverterEngine.Numerical.toBigInt(num, fromBase));
                result = ConverterEngine.Text.fromCharCodes(codes);
            } else {
                // Path 3: Standard number-to-number conversion
                const bigIntValue = ConverterEngine.Numerical.toBigInt(inputValue, fromBase);
                result = ConverterEngine.Numerical.fromBigInt(bigIntValue, toBase);
                 // Add spacing to binary output for superior readability
                if (toBase === '2') {
                    result = result.replace(new RegExp(`(.{4})`, 'g'), '$1 ').trim();
                }
            }
            
            outputArea.value = result;
            outputArea.style.color = ''; // Reset color on success
        } catch (error) {
            outputArea.value = `ERROR: ${error.message}`;
            outputArea.style.color = 'var(--error-color)';
        }
    }

    // --- Event Listeners ---
    [elements.inputArea, elements.fromBaseSelect, elements.toBaseSelect].forEach(el => {
        el.addEventListener('input', handleConversion);
        el.addEventListener('change', handleConversion);
    });

    elements.swapBtn.addEventListener('click', () => {
        const { inputArea, outputArea, fromBaseSelect, toBaseSelect } = elements;
        if (outputArea.style.color) return; // Prevent swap if output is an error/warning
        
        const fromValue = fromBaseSelect.value;
        fromBaseSelect.value = toBaseSelect.value;
        toBaseSelect.value = fromValue;
        
        // The output becomes the new input, preserving formatting.
        inputArea.value = outputArea.value;
        handleConversion();
    });

    // Theme & Clipboard functionality
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') elements.body.classList.add('dark');
    elements.themeToggle.addEventListener('click', () => {
        elements.body.classList.toggle('dark');
        localStorage.setItem('theme', elements.body.classList.contains('dark') ? 'dark' : 'light');
    });
    document.querySelectorAll('.copy-btn').forEach(button => {
        button.addEventListener('click', () => {
            const targetId = button.dataset.target;
            const targetTextarea = document.getElementById(targetId);
            if (targetTextarea.value && !targetTextarea.style.color) {
                navigator.clipboard.writeText(targetTextarea.value).then(() => {
                    button.classList.add('copied');
                    setTimeout(() => button.classList.remove('copied'), 1500);
                });
            }
        });
    });
    document.querySelector('.paste-btn')?.addEventListener('click', () => {
        navigator.clipboard.readText().then(text => {
            elements.inputArea.value = text;
            handleConversion();
        }).catch(err => { console.error('Failed to read clipboard: ', err); });
    });

    // --- Setup footer interaction for mobile ---
    function setupFooterInteraction() {
        const footerArea = document.querySelector('.footer-interactive-area');
        if (footerArea) {
            // Toggle 'active' class on click, which triggers the CSS animation
            footerArea.addEventListener('click', () => {
                footerArea.classList.toggle('active');
            });
        }
    }

    handleConversion(); // Initial conversion on page load
    setupFooterInteraction(); // Set up the footer click listener
});
